{
    "collab_server" : "",
    "contents" : "library(data.table)\nlibrary(xgboost)\nlibrary(Matrix)\nlibrary(vtreat)\nlibrary(mice)\nlibrary(Amelia)\n\n\n\n# Load Data\ntrndata <- fread(\"Data/train.csv\")\ntstdata <- fread(\"Data/test.csv\")\nsamplesub <- fread(\"Data/sample_submission.csv\")\n\n# Set Indicators\ntstdata[,SalePrice := 0]\ntrndata[,TrainSet := 1]\ntstdata[,TrainSet := 0]\n\n\n# Combine Train and Test\ndata <- rbind(trndata,tstdata)\n\n\n\noptions(na.action='na.pass')\nmodelframe <- data[,.(MSSubClass = as.factor(MSSubClass),\n                      MSZoning,\n                      LotFrontage = log(LotFrontage+1),\n                      LotArea = log(LotArea),\n                      StreetPaved = ifelse(Street == \"Pave\",1,0),\n                      Alley,\n                      LotShape = ifelse(LotShape %in% c(\"IR1\",\"IR2\",\"IR3\"),1,0), # \n                      LandContour = ifelse(LandContour == \"Gtl\",0,1),\n                      #Utilities, - excluded due to no variation\n                      LotConfig = ifelse(LotConfig == \"FR3\",\"FR2\",LotConfig), # FR2 &FR3 are similar and low freq.  Group together\n                      LandSlope = ifelse(LandSlope %in% c(\"Mod\",\"Sev\"),1,0), #Group low frequency slope vars together\n                      Neighborhood,\n                      RRProx = ifelse(substr(Condition1,1,2)==\"RR\" | substr(Condition2,1,2) == \"RR\",1,0),\n                      PosProx = ifelse(substr(Condition1,1,2)==\"Po\" | substr(Condition2,1,2) == \"Po\",1,0),\n                      ArteryProx = ifelse(substr(Condition1,1,2)==\"Ar\" | substr(Condition2,1,2) == \"Ar\",1,0),\n                      FeederProx = ifelse(substr(Condition1,1,2)==\"Fe\" | substr(Condition2,1,2) == \"Fe\",1,0),\n                      #Condition1,\n                      #Condition2,\n                      BldgType,\n                      Stories = ifelse(substr(HouseStyle,1,6) %in% c(\"1Story\",\"1.5Fin\",\"1.5Unf\"),1,ifelse(substr(HouseStyle,1,6) %in% c(\"2Story\",\"2.5Fin\",\"2.5Unfin\",\"SFoyer\",\"SLvl\"),2,0)),\n                      PartiallyUnfinished = ifelse(substr(HouseStyle,4,6) == \"Unf\",1,0),\n                      SplitLevel = ifelse(substr(HouseStyle,1,1) == \"S\",1,0),   \n                      #HouseStyle, captured above\n                      OverallQual = ifelse(OverallQual %in% c(1,2,3,4),1,ifelse(OverallQual %in% c(5,6,7),OverallQual-3,5)), #Grouping infrequent levels\n                      OverallCond = ifelse(OverallCond %in% c(1,2,3,4),1,ifelse(OverallCond %in% c(5,6,7),OverallCond-3,5)), #Grouping infrequent levels\n                      YearBuilt = 2010-YearBuilt,\n                      YearRemodAdd = 2010-YearBuilt,\n                      RemodelInd = ifelse(YearRemodAdd == YearBuilt,0,1),\n                      RoofStyle = ifelse(RoofStyle %in% c(\"Gambrel\",\"Mansard\",\"Shed\",\"Flat\"),\"Other\",RoofStyle),\n                      #RoofMatl, not enough deviation\n                      ExtStucco = ifelse(substr(Exterior1st,1,3) %in% c(\"ImS\",\"Stu\") | substr(Exterior2nd,1,3) %in% c(\"ImS\",\"Stu\"),1,0),\n                      ExtVinyl = ifelse(substr(Exterior1st,1,3) %in% c(\"Vin\") | substr(Exterior2nd,1,3) %in% c(\"Vin\") ,1,0),\n                      ExtBrkStn = ifelse(substr(Exterior1st,1,3) %in% c(\"Brk\",\"Sto\") | substr(Exterior2nd,1,3) %in% c(\"Brk\",\"Sto\") ,1,0),\n                      ExtSiding = ifelse(substr(Exterior1st,1,3) %in% c(\"Met\",\"Wd \") | substr(Exterior2nd,1,5) %in% c(\"Metal\",\"Wd Sd\") ,1,0),\n                      ExtShingle = ifelse(substr(Exterior1st,1,3) %in% c(\"Asp\",\"WdS\",\"Asb\") | substr(Exterior2nd,1,3) %in% c(\"AsphS\",\"Wd Sh \",\"AsbSh\") ,1,0),\n                      #Exterior1st,\n                      #Exterior2nd,\n                      MasVnrType,\n                      MasVnrArea = log(ifelse(is.na(MasVnrArea),0,MasVnrArea) +1),\n                      ExterQual = ifelse(ExterQual == \"Fa\", \"TA\",ExterQual),\n                      ExterCond = ifelse(ExterCond == \"Po\", \"Fa\",ExterCond),\n                      Foundation = ifelse(Foundation %in% c(\"Wood\",\"Stone\",\"Slab\"), \"Oth\", Foundation),\n                      BsmtInd <- ifelse(is.na(BsmtCond),0,1),\n                      BsmtQual = ifelse(BsmtQual == \"Fa\", \"TA\",BsmtQual),\n                      BsmtCond,\n                      BsmtExposure,\n                      #BsmtFinType1,\n                      BsmtUnFinPct = BsmtUnfSF / TotalBsmtSF,\n                      #BsmtFinSF1 = log(BsmtFinSF1+1),\n                      #BsmtFinType2,\n                      #BsmtFinSF2 = log(BsmtFinSF2+1),\n                      BsmtUnfSF = log(BsmtUnfSF+1),\n                      TotalBsmtSF = log(TotalBsmtSF+1),\n                      BsmtALQPct = (ifelse(BsmtFinType1 == \"ALQ\",BsmtFinSF1,0)+ifelse(BsmtFinType2 == \"ALQ\",BsmtFinSF2,0)) / TotalBsmtSF,\n                      BsmtBLQPct = (ifelse(BsmtFinType1 == \"BLQ\",BsmtFinSF1,0)+ifelse(BsmtFinType2 == \"BLQ\",BsmtFinSF2,0)) / TotalBsmtSF,\n                      BsmtGLQPct = (ifelse(BsmtFinType1 == \"GLQ\",BsmtFinSF1,0)+ifelse(BsmtFinType2 == \"GLQ\",BsmtFinSF2,0)) / TotalBsmtSF,\n                      BsmtLWQPct = (ifelse(BsmtFinType1 == \"LWQ\",BsmtFinSF1,0)+ifelse(BsmtFinType2 == \"LWQ\",BsmtFinSF2,0)) / TotalBsmtSF,\n                      BsmtRecPct = (ifelse(BsmtFinType1 == \"Rec\",BsmtFinSF1,0)+ifelse(BsmtFinType2 == \"Rec\",BsmtFinSF2,0)) / TotalBsmtSF,\n                      BsmtUnfPct = (ifelse(BsmtFinType1 == \"Unf\",BsmtFinSF1,0)+ifelse(BsmtFinType2 == \"Unf\",BsmtFinSF2,0)) / TotalBsmtSF,\n                      #Heating, - near zero variance\n                      #HeatingQC, - near zero variance\n                      CentralAirInd = ifelse(CentralAir == \"Y\",1,0),\n                      Electrical = ifelse(Electrical == \"SBrkr\",1,0), # Group together infrequent levels\n                      FirstFlrSF = log(`1stFlrSF`+1),\n                      SecondFlrSF = log(`2ndFlrSF`+1),\n                      LowQualFinSF = log(LowQualFinSF +1),\n                      LowQualFinPct = log((LowQualFinSF / (`1stFlrSF`+`2ndFlrSF`))+1),\n                      GrLivArea = log(GrLivArea+1),\n                      BsmtFullBath = ifelse(is.na(BsmtFullBath),0,BsmtFullBath),\n                      BsmtHalfBath = ifelse(is.na(BsmtHalfBath),0,BsmtHalfBath),\n                      FullBath = ifelse(is.na(FullBath),0,FullBath),\n                      HalfBath = ifelse(is.na(HalfBath),0,HalfBath),\n                      TotalBath = ((BsmtHalfBath+HalfBath)*0.5)+FullBath+BsmtFullBath,\n                      PctBathAbvGrd = ((HalfBath*0.5)+FullBath)/(((BsmtHalfBath+HalfBath)*0.5)+FullBath+BsmtFullBath),\n                      BedroomAbvGr,\n                      KitchenAbvGr,\n                      KitchenQual,\n                      TotRmsAbvGrd,\n                      Functional, #= ifelse(Functional %in% c(\"Maj1\",\"Maj2\",\"Sev\"),1,ifelse(Functional %in% c(\"Min1\",\"Min2\",\"Mod\"),2,3)),\n                      Fireplaces,\n                      #FireplaceQu, \n                      GarageInd = ifelse(is.na(GarageType),0,1),\n                      GarageType,\n                      GarageYrBlt = ifelse(is.na(GarageYrBlt),0,GarageYrBlt - YearBuilt), # transform to number of years after house was built\n                      GarageFinish,\n                      GarageCars,\n                      GarageArea = log(GarageArea+1),\n                      GarageQual = ifelse(GarageQual %in% c(\"Gd,Po\"),\"Fa\",ifelse(GarageQual == \"Ex\",\"TA\",GarageQual)),\n                      GarageCond = ifelse(GarageCond %in% c(\"Gd,Po\"),\"Fa\",ifelse(GarageCond == \"Ex\",\"TA\",GarageCond)),\n                      PavedDrive = ifelse(PavedDrive == \"P\",\"N\",PavedDrive),\n                      WoodDeckSF = log(WoodDeckSF+1),\n                      OpenPorchSF = log(OpenPorchSF+1),\n                      OpenPorchInd = ifelse(is.na(OpenPorchSF),0,1),\n                      EnclosedPorch,\n                      EnclosedPorchInd = ifelse(is.na(EnclosedPorch),0,1),\n                      ThreeSsnPorch = `3SsnPorch`,\n                      ScreenPorch,\n                      ScreenPorchInd = ifelse(is.na(ScreenPorch),0,1),\n                      PoolArea = log(PoolArea+1),\n                      PoolInd = ifelse(is.na(PoolQC),0,1),\n                      #PoolQC, - too few here\n                      Fence = ifelse(Fence == \"MnWw\",\"GdWo\",Fence), #colapse infrequent levels\n                      FenceInd = ifelse(is.na(Fence),0,1),\n                      Shed  = ifelse(MiscFeature == \"Shed\",1,0),\n                      #MiscVal,\n                      YrSold = as.factor(YrSold),\n                      MoSold = as.factor(MoSold),\n                      SaleType = ifelse(substr(SaleType,1,3)==\"Con\",\"Con\",ifelse(SaleType %in% c(\"Oth\", \"CWD\"),\"WD\",SaleType)), #Grouping some rare levels\n                      SaleCondition,\n                      TrainSet)]\n\n#### Explore Missing Values ####\nsort(sapply(data, function(x) { sum(is.na(x)) }), decreasing=TRUE)\n\n\n#### Impute Missing Values ####\n# Don't worry, we are not imputing all the missing values, just the ones that make sense\ntrainimputed <- mice(modelframe[,-\"TrainSet\",with = FALSE], m=1, method='cart', printFlag=FALSE)\n\n\n#### Selectively Apply Imputed Values to Dataset ####\n# Most of the missing values are useful but some cause confusion.\n# In this step we are applying imputation jist to the columns where it really makes sense\nmodelframe$LotFrontage <- complete(trainimputed)$LotFrontage\nmodelframe$LotFrontage <- complete(trainimputed)$LotFrontage\ntmp <- data[data$BsmtFinSF1==0,]\n\n\n#### Prepare Variable Treatments ####\nvtreatment <- mkCrossFrameNExperiment(cbind(modelframe[TrainSet ==1,],SalePrice = trndata[,SalePrice]),\n                                      colnames(modelframe[,-\"TrainSet\",with = FALSE]),\n                                      \"SalePrice\",\n                                      minFraction = 0.03,\n                                      rareCount = 10,\n                                      ncross = 5,\n                                      smFactor = 0.05,\n                                      collarProb = 0.01,\n                                      doCollar = TRUE\n                                      )\n\nscoreFrame <- vtreatment$treatments$scoreFrame\n#prunesig <- 0.003\nuseVars <- vtreatment$treatments$scoreFrame$varName[scoreFrame$code %in% c('lev','catN','clean','isBad') ] # (scoreFrame$sig <prunesig) condition for prunesig\n\n\n#### Data Set for Model Buildiing ####\nmodel_matrix <- as.matrix(vtreatment$crossFrame[,useVars])\nmodel_y <- vtreatment$crossFrame$SalePrice\n\n\n#### Data Set for Competition ####\ntest_matrix <- as.matrix(vtreat::prepare(vtreatment$treatments,modelframe[TrainSet == 0,-\"TrainSet\",with = FALSE], pruneSig = NULL,varRestriction = useVars))\n\n  \n\n\n",
    "created" : 1475629921481.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2315014561",
    "id" : "A948BA94",
    "lastKnownWriteTime" : 1479658707,
    "last_content_update" : 1479658707366,
    "path" : "~/Kaggle/HousePrices/DataPrep.R",
    "project_path" : "DataPrep.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}